CMD is used to pass both executable and parameter like ["sleep","5"]

docker run ubuntu-sleeper sleep 5 // in case of CMD we need to pass both 

ENTRYPOINT point is used to define base command/executable in file and append params to it

docker run ubuntu-sleeper 10

if you are using entrypoint and don't pass any params , the call will fail... docker run ubuntu-sleeper .
In such cases combination of ENTRYPOINT and CMD both are used , to provide a default value for the command , so that command doesn't fails .

docker run --entrypoint sleeper2.0 ubuntu-sleeper 10 // command to change entry-point on the fly !


CMD ======= args["10"] kubernetes // overrides CMD instruction in a docker file using which image we are running the container 

(List entries in command should be in double-quotes)

ENTRYPOINT ========== command["sleep2.0"] kubernetes // overrides entrypoint

spec:
  containers:
  
  env:
   - name:
     value:
     
single env key from config-map
==============================

env:
 - name:
   valueFrom:
      configMapKeyRef:
            name: app-config
            key: APP_COLOR
=====================================

volumes:
  - name: app-config-volume
    configMap:
       name: app-config
=========================

Getting values from a config-map

envFrom:
   - configMapRef:
          name: app-config
         
Getting values from a secret

envFrom:
   secretKeyRef:
   
Create config-map using kubectl command
========================================

kubectl create cm \ app-config --from-literal=APP_COLOR=blue
kubectl create cm \ app-config --from-file=app_config.properties

Create config-map definition file
==================================

data:
  APP_COLOR: blue
  APP_MODE: prod
   

Secrets
==================

echo -n 'text' | base64  // convert to base-64

echo -n 'encoded-text' | base64 --decode. // convert back to plain-text


Get values from a secret in a pod
=================================

envFrom:
   - secretRef:
           name: 
           
Get a single key value from a ConfigMap
========================================

env
- name
  valueFrom:
   secretKeyRef:
            name:
            key:

Get a secret from a file in a volume
=========================================

volumes
  - name: app-secret-volume
    secret:
      secretName: app-secret

Kubernetes security settings
==============================

if settings defined on pod level ====> they propagate to all the containers within it
if settings on both pod and container =====> container setting overrides the pod settings

securityContext:
          runAsUser:
          capabilities:                // capabilities are only supported at container level and not at the pod level
                add: ["MAC_ADMIN"] 

Kubernetes service account
============================

k get sa
k describe sa

spec:
  containers:
  
  serviceAccount:
  
  ------
  
  automountServiceAccountToken: false (to avoid setting default service account token)
  
  
  Resource requirements
  =====================
  
  resources:
      requests:
         memory:
         cpu:
=======================
      limits:
        memory:
        cpu:
        
if a pod uses more cpu than requested it gets throttled 
if a pod uses more memory than requested , it doesn't get throttled , but gets terminated after some time


TAINTS & TOLERATIONS.      (Pod to Node relationship)
=========================


* Taint - is like we apply odomos cream to repel mosquitos from biting us .  (Us -> Node , Mosquito -> Pod) .
* Tolerations - is like we still get bitten by some of the mosquitos as they are tolerant to the odomos cream smell .

kubectl taint nodes node01  app=blue:(taint-effect=NoScheule,PreferNoSchedule,NoExecute) (Taint Effect : what happens to the pods that do not tolerate this taint ?)

NoSchedule - Don't schedule at all

PreferNoSchedule - System will try not to schedule , but is not guaranteed !!

NoExecute - Existing pods on node with such taint will be evicted , and no new pods with that taint will be welcomed .


tolerations:
============

spec:
  containers:
  
  tolerations:
     - key: "app"
       operator: "Equal"
       value: "blue"
       effect: "NoSchedule"



* Taints and tolerations -- only provide a node with power to accept pods only with a certain kind of taint .  That does not restrict the pod with toleration 
to that particular node to not get placed at any other node then the one with taint . So that scenario is still very much possible !!


View Taint on a node -- kubectl describe node node01 | grep Taint


NodeSeclector
==============

Controls Pod placement on nodes by filtering upon the labels assigned to the nodes .

containers

nodeSelector:
       size: large
       
kubectl label nodes node01 size=large


But NodeSelector cannot help control pod placement for below criteria :

Place on Large or Small Node
NOT small node

For this we have the NodeAffinity  (Ensures Pods are hosted on particular nodes)
=============================================


affinity:
   nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpresions:
                - key :  
                  operator :  (Exists,In,NotIn)
                  values:
                  -


NodeAffinityTypes
===================

requiredDuringSchedulingIgnoredDuringExecution
preferredDuringSchedulingIgnoredDuringExecution


Multi-container Pods
======================

SideCar - Logging Agent
Adapter - Log format processing agent 
Ambassador - Externalize routing logic as per correct DB per env 
